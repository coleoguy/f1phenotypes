esize_test[[j]] <- newvec
esize_test[[j]] <- order(esize_test[[j]])
}
esize[[i]] <- esize_test
esizeCV <- lapply(esize, order(esize[[i]]))
}
##Trying below to make new esize code
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
esizeCV <- list()
for(i in 1:1000){
for(j in 1:length(loci)){
vec <- sample(x = 10000, size = loci[j], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[j]] <- order(newvec)
}
esize[[i]] <- esize_test
esizeCV <- lapply(esize, order(esize[[i]]))
}
##Trying below to make new esize code
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
esizeCV <- list()
for(i in 1:1000){
for(j in 1:length(loci)){
vec <- sample(x = 10000, size = loci[j], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[j]] <- newvec
esize_test[[j]] <- order(esize_test[[j]])
}
esize[[i]] <- esize_test
}
View(esize)
esize[[1]]
##Trying below to make new esize code
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
esizeCV <- list()
for(i in 1:1000){
for(j in 1:length(loci)){
vec <- sample(x = 10000, size = loci[j], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[j]] <- newvec
}
esize[[i]] <- esize_test
}
View(esize)
for(i in 1:1000){
for(j in 1:length(loci)){
vec <- sample(x = 10000, size = loci[j], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[j]] <- newvec
esize_test[[j]] <- esize_test[[order(j)]]
}
esize[[i]] <- esize_test
}
View(esize)
##Trying below to make new esize code
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
esizeCV <- list()
for(i in 1:1000){
for(j in 1:length(loci)){
vec <- sample(x = 10000, size = loci[j], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[j]] <- newvec
}
esize[[i]] <- esize_test
}
View(esize)
##Trying below to make new esize code
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
for(i in 1:length(loci)){
for(k in 1:1000){
vec <- sample(x = 10000, size = loci[j], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[j]] <- newvec
}
esize[[i]] <- esize_test
}
for(i in 1:length(loci)){
for(k in 1:1000){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
View(esize)
##Trying below to make new esize code compatible with loci matrix/vector
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
for(i in 1:length(loci)){
for(k in 1:1000){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- order(newvec)
}
esize[[i]] <- esize_test
}
View(esize)
for(i in 1:length(loci)){
for(k in 1:1000){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
View(esize)
##Trying below to make new esize code compatible with loci matrix/vector
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
for(i in 1:length(loci)){
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
View(esize)
##Trying below to make new esize code compatible with loci matrix/vector. I'm
#not going to sort or anything by CV, and just take a random sample.
loci <- matrix(c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
epipairlist <- list()
for(i in 1:length(loci)){
epipairlist[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
total_epi <- 5
for(i in 1:length(loci)){
epipairlist[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
View(epipairlist)
View(esize)
##Trying below to make new esize code compatible with loci matrix/vector. I'm
#not going to sort or anything by CV, and just take a random sample.
loci <- matrix(c(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
epipairlist <- list()
total_epi <- 5
for(i in 1:length(loci)){
epipairlist[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
View(esize)
esize[[9]][[3]]
sum(esize[[9]][[3]])
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
gsize <- 20
s.size <- 50
iter <- 1
verbose <- F
mating <- "random"
baselevelpheno <- 10
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
#esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
#              rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
##Trying below to make new esize code compatible with loci matrix/vector. I'm
#not going to sort or anything by CV, and just take a random sample.
loci <- matrix(c(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
esize_test <- list()
esize <- list()
epipairlist <- list()
total_epi <- 5
for(i in 1:length(loci)){
epipairlist[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
for(i in 1:length(loci)){
epipair[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
epipair <- list()
for(i in 1:length(loci)){
epipair[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(lapply(esize, as.numeric()))){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(lapply(esize, as.numeric))){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 1
verbose <- F
mating <- "random"
baselevelpheno <- 10
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
#esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
#              rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
baselevelpheno = baselevelpheno, verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
#Convert list to dataframe
newoutput <- do.call(rbind, x)
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
#set variables
N <- 50
gsize <- 20
s.size <- 50
iter <- 1
verbose <- F
mating <- "random"
baselevelpheno <- 10
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
loci <- matrix(c(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
total_epi <- 5
for(i in 1:length(loci)){
epipair[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
epipair <- list()
esize <- list()
esize_test <- list()
for(i in 1:length(loci)){
epipair[[i]] <- round(seq.int(from = 0, to = loci[i]/2, length.out = total_epi), digits = 0)
for(k in 1:10){
vec <- sample(x = 10000, size = loci[i], replace = TRUE)
newvec <- vec/sum(vec)
esize_test[[k]] <- newvec
}
esize[[i]] <- esize_test
}
View(epipair)
output <- list()
length(afreq)
View(loci)
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
for(i in 1:length(loci)){
for(j in 1:length(esize)){
for(k in 1:length(epipair)){
for(m in 1:length(hset)){
for(n in 1:length(afreq)){
for(o in 1:length(epi.type)){
output[[i]] <- simulate(N = N, loci = loci[i], effect.size = esize[[k]],
afreq = afreq[n], gsize = gsize, iter = iter,
epi.type = epi.type[o], hset = hset[m],
mating = mating, baselevelpheno = baselevelpheno,
verbose = verbose)
}
}
}
}
}
}
source('~/Desktop/functions_New.R')
getwd()
