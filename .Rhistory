}
}
if(type=="assort"){
par.index <- sample(1:length(ass.distmat), size = parents,
prob = as.vector(ass.distmat))
counter <- 1
for(i in 1:ncol(ass.distmat)){
for(j in 1:nrow(ass.distmat)){
if(counter %in% par.index){
chosen.parents <- rbind(chosen.parents, c(j,i))
}
counter <- counter + 1
}
}
}
if(type=="assort"){
par.index <- sample(1:length(ass.distmat), size = parents,
prob = as.vector(ass.distmat))
counter <- 1
for(i in 1:ncol(ass.distmat)){
for(j in 1:nrow(ass.distmat)){
if(counter %in% par.index){
chosen.parents <- rbind(chosen.parents, c(j,i))
}
counter <- counter + 1
}
}
}
View(chosen.parents)
table(chosen.parents)
table(chosen.parents)
SpeciesHyb[[i]] <- matrix(c(c(SpeciesA[[chosen.parents]][1, ],
SpeciesA[[chosen.parents]][2, ])[1:gsize + sample(c(0, gsize), gsize, replace = T)],
c(SpeciesB[[chosen.parents]][1, ],
SpeciesB[[chosen.parents]][2, ])[1:gsize + sample(c(0, gsize), gsize, replace = T)]),
2, gsize, byrow = T)
for(i in 1:N){
SpeciesHyb[[i]] <- matrix(c(c(SpeciesA[[chosen.parents]][1, ],
SpeciesA[[chosen.parents]][2, ])[1:gsize + sample(c(0, gsize), gsize, replace = T)],
c(SpeciesB[[chosen.parents]][1, ],
SpeciesB[[chosen.parents]][2, ])[1:gsize + sample(c(0, gsize), gsize, replace = T)]),
2, gsize, byrow = T)
}
for(i in 1:N){
SpeciesHyb[[i]] <- matrix(c(c(SpeciesA[chosen.parents][1, ],
SpeciesA[chosen.parents][2, ])[1:gsize + sample(c(0, gsize), gsize, replace = T)],
c(SpeciesB[chosen.parents][1, ],
SpeciesB[chosen.parents][2, ])[1:gsize + sample(c(0, gsize), gsize, replace = T)]),
2, gsize, byrow = T)
}
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
newoutput <- do.call(rbind, x)
View(newoutput)
source('~/Documents/GitHub/f1phenotypes/functions.R')
source("functions.R")
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
newoutput <- do.call(rbind, x)
View(newoutput)
min(newoutput$value)
#For some reason I'm getting lot's of NaN's, especially for Hybrids.
min(newoutput$stat=="var")
is.numeric(newoutput$stat=="var")
#For some reason I'm getting lot's of NaN's, especially for Hybrids.
is.na(newoutput$stat)
max(newoutput$stat=="var")
min(newoutput$stat=="var")
var.test()
source('~/Documents/GitHub/f1phenotypes/functions.R')
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
source('~/Documents/GitHub/f1phenotypes/functions.R')
etwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
setwd("~/Documents/GitHub/f1phenotypes")
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
source('~/Documents/GitHub/f1phenotypes/functions.R')
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
newoutput <- do.call(rbind, x)
View(newoutput)
source('~/Documents/GitHub/f1phenotypes/functions.R')
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
source('~/Documents/GitHub/f1phenotypes/functions.R')
setwd("~/Documents/GitHub/f1phenotypes")
source("functions.R")
library(ggplot2)
library(doMC)
registerDoMC(cores = 6)
N <- 50
loci <- 10
gsize <- 20
s.size <- 50
iter <- 10
verbose <- F
mating <- "random"
#create lists of parameter values
afreq <- list(c(0.5,0.5), c(0.6, 0.4), c(0.7, 0.3), c(0.8, 0.2), c(0.9,0.1), c(1,0))
hset <- c("all_add", "all_dom", "half_dom")
esize <- list(c(0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01),
rep(0.1, 10))
epi.type <- c("noepi", "addbyadd", "addbydom", "dombyadd", "dombydom")
epipair <- c(0,1,2,5)
x <- foreach(i=1:length(afreq), .combine="c") %dopar% { #this loops through the afreqs, and parallelizes by afreq
#for(i in 1:length(afreq)){ #this loops through allele frequencies
output <- list()
counter <- 1
for(j in 1:length(hset)){ #this loops through different hsets
for(k in 1:length(esize)){ #this loops through different esizes
print(counter)
for(m in 1:length(epipair)){ #this loops through different epipairs
if(epipair[m]==0){ #if epipair is 0, then set an arbitrary epi.type and record the output
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[1], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]], sep="")
counter <- counter +1
}
if(epipair[m]>0){ #if epipair is greater than 0, then record the output
for(n in 2:length(epi.type)){ #this loops through different epi.types
output[[counter]] <- simulate(N = N, loci = loci, effect.size = esize[[k]],
afreq = afreq[[i]], gsize = gsize,
iter = iter, s.size = s.size, epipair = epipair[m],
epi.type = epi.type[n], hset = hset[j], mating = mating,
verbose = verbose)
names(output)[counter] <- paste("freqs=", paste(afreq[[i]],collapse="_"),
"h=", hset[[j]],
"esize=", paste(esize[[k]], collapse = "_"),
"epipair=", epipair[[m]],
"epitype=", epi.type[n], sep="")
counter <- counter +1
}
}
}
}
}
output
}
